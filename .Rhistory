[1] 3
x <- 3
x
[1] 3
x <- 3
x[1] 3
x <- 3
x [1] 3
x <- 3
x
sqrt(x)
3*4
4+x
2^x
ham <- 10
ham + eggs
ham <- 10
eggs <- 3.44
ham + eggs
you <- 'me'
you
I <- "they"
I
ypu == 'me'
you == 'me'
I != 'they'
if (my.income < my.expenses) {status <- 'dire'} else if (my.income == my.expenses) {status <- 'shaky'} else {status <- 'okay'}
my.income <- 100
my.expenses <- 150
if (my.income < my.expenses) {status <- 'dire'} else if (my.income == my.expenses) {status <- 'shaky'} else {status <- 'okay'}
status
# which(): gives all occurrences that satisfy a condition, i.e., are TRUE
stats <- function(x) {
m <- mean(x)
std <- sd(x)
se <- std/sqrt(length(x))
return(c(m,std,se))
}
# Vectors: commonly use concatenate function to create vectors
v <- c(7,6,5,4,3)
v
# Vectors: commonly use concatenate function to create vectors
v <- c(7,6,5,4,3)
v
w <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
w
v+1
v * 100
length(w)
w[2:5]
sqrt(w)
v*w
u <- c(10,20,30)
u*w
z <- seq(0,100,20)
z
i <- 1:10
i
small.ints <- i< 5
which(small.ints)
small.ints
# matrix(v, nrow=3, ncol=4)
# matrix(v, 3, 4) -- more tersely
# matrix(v, 3) -- 3 understood to mean number of rows
# matrix(v, ncol=4) -- but not if columns specified
# matrix(0, 3, 4) -- 3x4 matrix of zeros
# matrix(1:3, 3, 4) -- will give matrix of columns of 1 2 3
# matrix(1:3, 3, 4, byrows=TRUE) -- will give matrix of rows that wrap around: 1 2 3 1
v <- 1:12
matrix(v,3,4)
m <- matrix(v,3,4)
m
# dim() give number of rows and columns.
dim(m)
# dim() give number of rows and columns.
dim(m)
length(m)
#length gives the num of items in matrix
head(m,2)
View(m)
# tail(m, n) gives up to last 6 rows in matrix, i.e., n_max = 6.
m[2,4]
View(m)
m[1,]
m[,3]
m[1:2,3]
m[3]
#List
alist <- list('Hello, World!', TRUE, 2:5, 3.141592)
alist
alist[1]
alist[[1]]
alist[[3]]
alist[[3]][[4]]
# can add to list by naming element:
alist[['me']] <- 'Melvin'
alist
alist$me
alist[5]
door = 'thing'
door
c  = c(1:5)
c
vet8 = rep(c(1,2,3),len = 31)
vet8
instal.packages('rmarkdown')
install.packages('rmarkdown')
install.packages(c("ggplot2", "GGally", "stats"))
install.packages(c("ggplot2", "GGally", "stats"))
install.packages(c("ggplot2", "GGally", "stats"))
source("C:/Users/littl/OneDrive/WSU School Stuff/Data 115/Problem sets/PS5/-DATA115_2025Spring_PS5_Team4_Manning_Durben_Feltmann_Lana_Palmer/Q2.R")
source("C:/Users/littl/OneDrive/WSU School Stuff/Data 115/Problem sets/PS5/-DATA115_2025Spring_PS5_Team4_Manning_Durben_Feltmann_Lana_Palmer/Q2.R")
source("C:/Users/littl/OneDrive/WSU School Stuff/Data 115/Problem sets/PS5/-DATA115_2025Spring_PS5_Team4_Manning_Durben_Feltmann_Lana_Palmer/Q2.R")
source("C:/Users/littl/OneDrive/WSU School Stuff/Data 115/Problem sets/PS5/-DATA115_2025Spring_PS5_Team4_Manning_Durben_Feltmann_Lana_Palmer/Q2.R")
source("C:/Users/littl/OneDrive/WSU School Stuff/Data 115/Problem sets/PS5/-DATA115_2025Spring_PS5_Team4_Manning_Durben_Feltmann_Lana_Palmer/Q2.R")
setwd("C:/Users/littl/OneDrive/WSU School Stuff/Data 115/Problem sets/PS5/-DATA115_2025Spring_PS5_Team4_Manning_Durben_Feltmann_Lana_Palmer")
source("C:/Users/littl/OneDrive/WSU School Stuff/Data 115/Problem sets/PS5/-DATA115_2025Spring_PS5_Team4_Manning_Durben_Feltmann_Lana_Palmer/Q2.R")
source("C:/Users/littl/OneDrive/WSU School Stuff/Data 115/Problem sets/PS5/-DATA115_2025Spring_PS5_Team4_Manning_Durben_Feltmann_Lana_Palmer/Q2.R")
clear
source("C:/Users/littl/OneDrive/WSU School Stuff/Data 115/Problem sets/PS5/-DATA115_2025Spring_PS5_Team4_Manning_Durben_Feltmann_Lana_Palmer/Q2.R")
source("C:/Users/littl/OneDrive/WSU School Stuff/Data 115/Problem sets/PS5/-DATA115_2025Spring_PS5_Team4_Manning_Durben_Feltmann_Lana_Palmer/Q2.R")
head(advertising_df)
ggpairs(advertising_df[, c('TV', 'radio', 'newspaper', 'sales')],
title = 'Scatterplot Matrix of Advertising Data')
